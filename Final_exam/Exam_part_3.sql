--1. Sa se scrie interogarea prin intemediul funcțiilor ce va afla pentru fiecare--
--	 profesor numărul de studenți promovați și nepromovați--

SELECT LECTOR_ID, CONCAT(NUME, ' ', PRENUME) AS NUME_LECTOR,  
				  DBO.F1(LECTOR_ID, 1) AS STUDENTI_PROMOVATI, 
				  DBO.F1(LECTOR_ID, 2) AS STUDENTI_NEPROMOVATI 
FROM LECTOR 
 
ALTER FUNCTION F1(@PROF INT, @PARAM INT) 
RETURNS INT 
AS 
BEGIN  
	DECLARE @W INT; 
	IF (@PARAM = 1)  
	BEGIN 
		SET @W = (SELECT COUNT(DISTINCT(S.STUDENT_ID)) FROM NOTA N INNER JOIN STUDENT S ON S.STUDENT_ID = N.STUDENT_ID 
																   INNER JOIN EXAMINARE E ON E.EXAMINARE_ID = N.EXAMINARE_ID 
				  WHERE E.LECTOR_ID = @PROF AND NOTA >= 5) 
	END; 
	 
	IF (@PARAM = 2)  
	BEGIN 
		SET @W = (SELECT COUNT(DISTINCT(S.STUDENT_ID)) FROM NOTA N INNER JOIN STUDENT S ON S.STUDENT_ID = N.STUDENT_ID 
																   INNER JOIN EXAMINARE E ON E.EXAMINARE_ID = N.EXAMINARE_ID 
				  WHERE E.LECTOR_ID = @PROF AND NOTA < 5) 
	END; 
	 
	RETURN @W; 
END; 
 

--2. Să se scrie interogarea prin intemediul funcțiilor ce va afla pentru fiecare grupă – 
--   numărul de băieți și cel de fete--

SELECT GRUPA_ID, NUME,  
				 DBO.F2(GRUPA_ID, 1) AS NR_BAIETI, 
				 DBO.F2(GRUPA_ID, 2) AS NR_FETE 
FROM GRUPA 
 
CREATE FUNCTION F2(@GRUPA INT, @PARAM INT) 
RETURNS INT 
AS 
BEGIN 
	DECLARE @W INT; 
	IF (@PARAM = 1)  
	BEGIN 
		SET @W = (SELECT COUNT(*) FROM STUDENT S WHERE S.GRUPA_ID = @GRUPA AND GEN = 1 ) 
	END; 
	 
	IF (@PARAM = 2)  
	BEGIN 
		SET @W = (SELECT COUNT(*) FROM STUDENT S WHERE S.GRUPA_ID = @GRUPA AND GEN = 0 ) 
	END; 
	 
	RETURN @W; 
END; 

--3. Să se scrie interogarea prin intemediul funcțiilor ce va afla pentru fiecare grupă – numărul 
--   de băieți restanțieri și cel de fete restanțiere--

SELECT GRUPA_ID, NUME,  
				 DBO.F3(GRUPA_ID, 1) AS NR_BAIETI_RESTANTIERI, 
				 DBO.F3(GRUPA_ID, 2) AS NR_FETE_RESTANTIERE 
FROM GRUPA 
 
ALTER FUNCTION F3(@GRUPA INT, @PARAM INT) 
RETURNS INT 
AS  
BEGIN 
	DECLARE @W INT; 
	IF (@PARAM = 1)  
	BEGIN 
		SET @W = (SELECT COUNT(*) FROM NOTA N INNER JOIN STUDENT S ON S.STUDENT_ID = N.STUDENT_ID 
											  INNER JOIN GRUPA G ON G.GRUPA_ID = S.GRUPA_ID 
				  WHERE G.GRUPA_ID = @GRUPA AND NOTA < 5 AND GEN = 1) 
	END; 
	 
	IF (@PARAM = 2)  
	BEGIN 
		SET @W = (SELECT COUNT(*) FROM NOTA N INNER JOIN STUDENT S ON S.STUDENT_ID = N.STUDENT_ID 
											  INNER JOIN GRUPA G ON G.GRUPA_ID = S.GRUPA_ID 
				  WHERE G.GRUPA_ID = @GRUPA AND NOTA < 5 AND GEN = 0) 
	END; 
	 
	RETURN @W; 
END; 


--4. Să se scrie interogarea prin intemediul funcțiilor ce va afla pentru fiecare grupă – 
--   raportul dintre studenții restanțieri cu cei nerestanțieri--
SELECT GRUPA_ID, NUME, 
				 DBO.F4(GRUPA_ID) AS RAPORT_RESTANTIERI_NERESTANTIERI
FROM GRUPA

ALTER FUNCTION F4(@GRUPA INT)
RETURNS VARCHAR(50)
AS
BEGIN
	DECLARE @X INT;
	DECLARE @Y INT;
	DECLARE @W VARCHAR(50);

	SET @X = (SELECT COUNT(DISTINCT(S.STUDENT_ID)) FROM NOTA N INNER JOIN STUDENT S ON S.STUDENT_ID = N.STUDENT_ID
															   INNER JOIN GRUPA G ON G.GRUPA_ID = S.GRUPA_ID
			  WHERE G.GRUPA_ID = @GRUPA AND NOTA < 5)

	SET @Y = (SELECT COUNT(DISTINCT(S.STUDENT_ID)) FROM NOTA N INNER JOIN STUDENT S ON S.STUDENT_ID = N.STUDENT_ID
															   INNER JOIN GRUPA G ON G.GRUPA_ID = S.GRUPA_ID
			  WHERE G.GRUPA_ID = @GRUPA AND NOTA >= 5)

	SET @W = CONCAT (@X, ' (RESTANTIERI)', ' / ', @Y, ' (NERESTANTIERI)');

	RETURN @W;

END;

SELECT * FROM NOTA N INNER JOIN STUDENT S ON N.STUDENT_ID = S.STUDENT_ID WHERE GRUPA_ID = 1


--5. Să se scrie interogarea prin intemediul funcțiilor ce va afla pentru fiecare an de îmatriculare raportul dinte 
--	 numărul de studenți români și cei ruși--

SELECT AN_FORMARE, DBO.F5(AN_FORMARE) AS RAPORT_STUDENTI_ROMANI_RUSI
FROM GRUPA
GROUP BY AN_FORMARE

CREATE FUNCTION F5(@AN INT)
RETURNS VARCHAR(50)
AS
BEGIN
	DECLARE @X INT;
	DECLARE @Y INT;
	DECLARE @W VARCHAR(50);

	SET @X = (SELECT COUNT(*) FROM STUDENT S INNER JOIN GRUPA G ON G.GRUPA_ID = S.GRUPA_ID
			  WHERE G.AN_FORMARE = @AN AND LIMBA = 'RO')

	SET @Y = (SELECT COUNT(*) FROM STUDENT S INNER JOIN GRUPA G ON G.GRUPA_ID = S.GRUPA_ID
			  WHERE G.AN_FORMARE = @AN AND LIMBA = 'RU')

	SET @W = CONCAT (@X, ' (STUDENTI ROMANI)', ' / ', @Y, ' (STUDENTI RUSI)');

	RETURN @W;

END;

SELECT * FROM NOTA N INNER JOIN STUDENT S ON N.STUDENT_ID = S.STUDENT_ID WHERE GRUPA_ID = 1


--6. Să se scrie o viziune care va afişa facultatea, specialitatea, grupa şi studentul cu cea mai mare medie--

ALTER VIEW MED AS 
SELECT F.NUME AS FAC_NUME, SS.NUME AS SPEC_NUME, G.NUME AS GROUP_NUME, CONCAT(S.NUME, ' ', S.PRENUME) AS STUD_NUME,
(SELECT AVG(NOTA) FROM NOTA N INNER JOIN STUDENT SSS ON SSS.STUDENT_ID = N.STUDENT_ID
 WHERE SSS.STUDENT_ID = S.STUDENT_ID) AS MEDIA

							   FROM FACULTATE F INNER JOIN SPECIALITATE SS ON SS.FACULTATE_ID = F.FACULTATE_ID
							   INNER JOIN GRUPA G ON G.SPECIALITATE_ID = SS.SPECIALITATE_ID
							   INNER JOIN STUDENT S ON S.GRUPA_ID = G.GRUPA_ID

SELECT * FROM MED WHERE MEDIA = (SELECT MAX(MEDIA) FROM MED)


--7. Să se scrie interogarea prin intemediul funcțiilor tabelare ce va afla studentul cu cea mai mare nota--
SELECT S.STUDENT_ID, CONCAT(NUME, ' ', PRENUME) AS NUME, NOTA
FROM STUDENT S INNER JOIN NOTA N ON N.STUDENT_ID = S.STUDENT_ID
GROUP BY S.STUDENT_ID, CONCAT(NUME, ' ', PRENUME), NOTA
HAVING NOTA IN (SELECT MAX(MAX_NOTA) FROM DBO.F7(S.STUDENT_ID))


ALTER FUNCTION F7(@ID INT)
RETURNS TABLE
AS
RETURN
(
		SELECT S.STUDENT_ID,
		(SELECT MAX(NOTA) FROM NOTA N INNER JOIN STUDENT SSS ON SSS.STUDENT_ID = N.STUDENT_ID
		 WHERE SSS.STUDENT_ID = S.STUDENT_ID) AS MAX_NOTA
		 FROM STUDENT S
)

--8. Să se scrie procedura ce va afla pentru o oarecare facultate media cea mai mare pentru studenții de un anumit gen--
ALTER PROCEDURE MEDIA @FACULTATE VARCHAR(20), @GEN INT
AS
SELECT MAX(MED) AS MEDIA_MAX FROM
	(
	SELECT S.STUDENT_ID,
		(SELECT AVG(NOTA) FROM NOTA N INNER JOIN STUDENT X ON X.STUDENT_ID = N.STUDENT_ID
		 WHERE X.STUDENT_ID = S.STUDENT_ID) AS MED
	FROM STUDENT S INNER JOIN NOTA N ON S.STUDENT_ID = N.STUDENT_ID
											 INNER JOIN EXAMINARE E ON E.EXAMINARE_ID = N.EXAMINARE_ID
											 INNER JOIN SPECIALITATE SS ON SS.SPECIALITATE_ID = E.SPECIALITATEA_ID
											 INNER JOIN FACULTATE F ON F.FACULTATE_ID = SS.FACULTATE_ID
	WHERE F.NUME = @FACULTATE AND S.GEN = @GEN
	) TT


EXEC MEDIA @FACULTATE ='FACULTATEA TELE', @GEN = 0


--9. Să se scrie procedura ce va afla pe baza disciplinei – numărul de studenți examinați trecător; --
--   numărul de studenți examinați netrecător; numărul de grupe examinate; numărul de profi examinatori --
ALTER PROCEDURE P9 @DISCIPLINA VARCHAR(20)
AS
SELECT 

	(SELECT COUNT(DISTINCT(S.STUDENT_ID)) FROM STUDENT S INNER JOIN NOTA N ON N.STUDENT_ID = S.STUDENT_ID
														 INNER JOIN EXAMINARE E ON E.EXAMINARE_ID = N.EXAMINARE_ID
														 INNER JOIN DISCIPLINA D ON D.DISCIPLINA_ID = E.DISCIPLINA_ID
	 WHERE NOTA >=5 AND D.NUME = @DISCIPLINA) AS STUD_EXAM_TREC,

	(SELECT COUNT(DISTINCT(S.STUDENT_ID)) FROM STUDENT S INNER JOIN NOTA N ON N.STUDENT_ID = S.STUDENT_ID
														 INNER JOIN EXAMINARE E ON E.EXAMINARE_ID = N.EXAMINARE_ID
														 INNER JOIN DISCIPLINA D ON D.DISCIPLINA_ID = E.DISCIPLINA_ID
	 WHERE NOTA < 5 AND D.NUME =@DISCIPLINA) AS STUD_EXAM_NETREC,

	(SELECT COUNT(DISTINCT(G.GRUPA_ID)) FROM STUDENT S INNER JOIN NOTA N ON N.STUDENT_ID = S.STUDENT_ID
													   INNER JOIN EXAMINARE E ON E.EXAMINARE_ID = N.EXAMINARE_ID
													   INNER JOIN DISCIPLINA D ON D.DISCIPLINA_ID = E.DISCIPLINA_ID
													   INNER JOIN GRUPA G ON G.GRUPA_ID = S.GRUPA_ID
	 WHERE D.NUME = @DISCIPLINA) AS NR_GRUPE_EXAM ,

	(SELECT COUNT(DISTINCT(L.LECTOR_ID)) NR_PROF_EXAM FROM LECTOR L INNER JOIN EXAMINARE E ON L.LECTOR_ID = E.LECTOR_ID
																    INNER JOIN DISCIPLINA D ON D.DISCIPLINA_ID = E.DISCIPLINA_ID
	 WHERE D.NUME = @DISCIPLINA) AS NR_PROFI_EXAM

FROM DISCIPLINA 
WHERE NUME = @DISCIPLINA


EXEC P9 @DISCIPLINA = 'C++'

--10. Să se scrie procedura ce va afla pe baza disciplinei și anului de îmatriculare studentul cu cea mai mare notă--
ALTER PROCEDURE P10 @DISCIPLINA VARCHAR(20), @AN INT
AS
SELECT MIN(MAXX) AS NOTA_MAX FROM
	(
	SELECT S.STUDENT_ID,
		(SELECT MAX(NOTA) FROM NOTA N INNER JOIN STUDENT X ON X.STUDENT_ID = N.STUDENT_ID
		 WHERE X.STUDENT_ID = S.STUDENT_ID) AS MAXX
	FROM STUDENT S INNER JOIN NOTA N ON S.STUDENT_ID = N.STUDENT_ID
				   INNER JOIN EXAMINARE E ON E.EXAMINARE_ID = N.EXAMINARE_ID
			       INNER JOIN DISCIPLINA D ON D.DISCIPLINA_ID = E.DISCIPLINA_ID
				   INNER JOIN GRUPA G ON G.GRUPA_ID = S.GRUPA_ID
	WHERE D.NUME = @DISCIPLINA AND G.AN_FORMARE = @AN
	) TT

EXEC P10 @DISCIPLINA = 'C++', @AN = 2021


--11. Să se scrie procedura ce va afla pe baza disciplinei și grupa, numarul de note de 10; 9.00- 9.99; 8.00-8.99; 
--    7.00- 7.99; 6.00 – 6.99; 5.00-5.99; 1.00-4.99--

CREATE PROCEDURE P11 @DISCIPLINA VARCHAR(20), @GRUPA VARCHAR(20)
AS
SELECT 

	(SELECT COUNT(*) FROM NOTA N INNER JOIN STUDENT S ON S.STUDENT_ID = N.STUDENT_ID
								 INNER JOIN GRUPA G ON G.GRUPA_ID = S.GRUPA_ID
								 INNER JOIN EXAMINARE E ON E.EXAMINARE_ID = N.EXAMINARE_ID
								 INNER JOIN DISCIPLINA D ON D.DISCIPLINA_ID = E.DISCIPLINA_ID
	 WHERE D.NUME = @DISCIPLINA AND NOTA = 10 AND G.NUME=@GRUPA) AS NOTA_10,

	 (SELECT COUNT(*) FROM NOTA N INNER JOIN STUDENT S ON S.STUDENT_ID = N.STUDENT_ID
								  INNER JOIN GRUPA G ON G.GRUPA_ID = S.GRUPA_ID
								  INNER JOIN EXAMINARE E ON E.EXAMINARE_ID = N.EXAMINARE_ID
								  INNER JOIN DISCIPLINA D ON D.DISCIPLINA_ID = E.DISCIPLINA_ID
	  WHERE D.NUME = @DISCIPLINA AND G.NUME=@GRUPA AND NOTA BETWEEN 9 AND  9.99 ) AS NOTA_9,

	 (SELECT COUNT(*) FROM NOTA N INNER JOIN STUDENT S ON S.STUDENT_ID = N.STUDENT_ID
								  INNER JOIN GRUPA G ON G.GRUPA_ID = S.GRUPA_ID
								  INNER JOIN EXAMINARE E ON E.EXAMINARE_ID = N.EXAMINARE_ID
								  INNER JOIN DISCIPLINA D ON D.DISCIPLINA_ID = E.DISCIPLINA_ID
	  WHERE D.NUME = @DISCIPLINA AND G.NUME=@GRUPA AND NOTA BETWEEN 8 AND  8.99 ) AS NOTA_8,

	 (SELECT COUNT(*) FROM NOTA N INNER JOIN STUDENT S ON S.STUDENT_ID = N.STUDENT_ID
								  INNER JOIN GRUPA G ON G.GRUPA_ID = S.GRUPA_ID
								  INNER JOIN EXAMINARE E ON E.EXAMINARE_ID = N.EXAMINARE_ID
								  INNER JOIN DISCIPLINA D ON D.DISCIPLINA_ID = E.DISCIPLINA_ID
	  WHERE D.NUME = @DISCIPLINA AND G.NUME=@GRUPA AND NOTA BETWEEN 7 AND  7.99 ) AS NOTA_7,

	 (SELECT COUNT(*) FROM NOTA N INNER JOIN STUDENT S ON S.STUDENT_ID = N.STUDENT_ID
								  INNER JOIN GRUPA G ON G.GRUPA_ID = S.GRUPA_ID
								  INNER JOIN EXAMINARE E ON E.EXAMINARE_ID = N.EXAMINARE_ID
								  INNER JOIN DISCIPLINA D ON D.DISCIPLINA_ID = E.DISCIPLINA_ID
	  WHERE D.NUME = @DISCIPLINA AND G.NUME=@GRUPA AND NOTA BETWEEN 6 AND  6.99 ) AS NOTA_6,

	 (SELECT COUNT(*) FROM NOTA N INNER JOIN STUDENT S ON S.STUDENT_ID = N.STUDENT_ID
								  INNER JOIN GRUPA G ON G.GRUPA_ID = S.GRUPA_ID
								  INNER JOIN EXAMINARE E ON E.EXAMINARE_ID = N.EXAMINARE_ID
								  INNER JOIN DISCIPLINA D ON D.DISCIPLINA_ID = E.DISCIPLINA_ID
	  WHERE D.NUME = @DISCIPLINA AND G.NUME=@GRUPA AND NOTA BETWEEN 5 AND  5.99 ) AS NOTA_5,

	 (SELECT COUNT(*) FROM NOTA N INNER JOIN STUDENT S ON S.STUDENT_ID = N.STUDENT_ID
								  INNER JOIN GRUPA G ON G.GRUPA_ID = S.GRUPA_ID
								  INNER JOIN EXAMINARE E ON E.EXAMINARE_ID = N.EXAMINARE_ID
								  INNER JOIN DISCIPLINA D ON D.DISCIPLINA_ID = E.DISCIPLINA_ID
	  WHERE D.NUME = @DISCIPLINA AND G.NUME=@GRUPA AND NOTA BETWEEN 1 AND  4.99 ) AS NOTA_1_4

FROM DISCIPLINA D INNER JOIN EXAMINARE E ON E.DISCIPLINA_ID = D.DISCIPLINA_ID
				  INNER JOIN SPECIALITATE S ON S.SPECIALITATE_ID = E.SPECIALITATEA_ID
				  INNER JOIN GRUPA G ON G.SPECIALITATE_ID = S.SPECIALITATE_ID
WHERE D.NUME = @DISCIPLINA AND G.NUME = @GRUPA

EXEC P11 @DISCIPLINA = 'INFORMATICA', @GRUPA = 'E-1'


--12. Să se scrie procedura ce va face analiza pe baza a anului de îmatriculare și va afișa cine are o medie 
--    mai mare (românii sau rușii)--
ALTER PROCEDURE P12 @AN INT
AS
(
SELECT IIF(AVG(ROM) - AVG(RUS) > 0,
		  CONCAT('PENTRU ANUL ', @AN, ' GRUPA ROMANA ARE O MEDIE DE ', AVG(ROM), ' CE ESTE MAI MARE DECAT MEDIA STUDENTILOR RUSI DE ', AVG(RUS)),
		  CONCAT('PENTRU ANUL ', @AN, ' GRUPA RUSA ARE O MEDIE DE ', AVG(RUS), ' CE ESTE MAI MARE DECAT MEDIA STUDENTILOR ROMANI DE ', AVG(ROM)))
		  AS MEDIA_MAI_MARE_AU FROM
	(
		SELECT S.STUDENT_ID,
		(SELECT AVG(NOTA) FROM NOTA N INNER JOIN STUDENT X ON X.STUDENT_ID = N.STUDENT_ID
												 INNER JOIN GRUPA G ON G.GRUPA_ID = X.GRUPA_ID
		 WHERE X.STUDENT_ID = S.STUDENT_ID AND G.LIMBA = 'RO' AND NOTA IS NOT NULL
			   AND G.AN_FORMARE = @AN) AS ROM,

		(SELECT AVG(NOTA) FROM NOTA N INNER JOIN STUDENT X ON X.STUDENT_ID = N.STUDENT_ID
									  INNER JOIN GRUPA G ON G.GRUPA_ID = X.GRUPA_ID
		 WHERE X.STUDENT_ID = S.STUDENT_ID AND G.LIMBA = 'RU' AND NOTA IS NOT NULL
		       AND G.AN_FORMARE = @AN) AS RUS

		FROM STUDENT S
	) TT
)

EXEC P12 @AN = 2021


--13. Să se scrie un declanșator ce la modificarea unei note va anunța că a fost modificată nota dintr-o valoare în alta--
--    pentru un anumit student și disciplină. Exemplu: A fost modificata nota pentru studentul XXXXX la disciplina YYYY din 6 în 7--

ALTER TRIGGER TR1 ON NOTA 
AFTER UPDATE 
AS
	DECLARE @NOTA_NEW FLOAT;
	DECLARE @NOTA_OLD FLOAT;
	DECLARE @STUD INT;
	DECLARE @NUME VARCHAR(50);
	DECLARE @DISCIPLINA VARCHAR(50);

	IF (UPDATE(NOTA))
	BEGIN
		SET @NOTA_NEW = (SELECT NOTA FROM INSERTED);
		SET @NOTA_OLD = (SELECT NOTA FROM DELETED);

		SET @STUD = (SELECT STUDENT_ID FROM INSERTED);
		SET @NUME = (SELECT CONCAT(S.NUME, ' ', S.PRENUME) FROM STUDENT S WHERE S.STUDENT_ID = @STUD);

		SET @DISCIPLINA = (SELECT D.NUME FROM DISCIPLINA D INNER JOIN EXAMINARE E ON E.DISCIPLINA_ID = D.DISCIPLINA_ID
														   INNER JOIN NOTA N ON N.EXAMINARE_ID = E.EXAMINARE_ID
						   WHERE N.STUDENT_ID = @STUD);

		SELECT CONCAT('A fost modificata nota pentru studentul ', CONVERT(VARCHAR(30), @STUD), ' la disciplina ', @DISCIPLINA,  
		' din ', CONVERT(VARCHAR(5), @NOTA_OLD), ' în ', CONVERT(VARCHAR(5), @NOTA_NEW)) AS TRIGGER_MODIFICARE_NOTA
	END; 

UPDATE NOTA SET NOTA = 7 WHERE STUDENT_ID = 65


--14. Să se scrie un singur declanșator ce la gestionarea tabelei cu discipline va anunța: câte discipline au fost adăugate, --
--    modificate sau eliminate--

ALTER TRIGGER TR2 ON DISCIPLINA
AFTER UPDATE, DELETE, INSERT	
AS
	DECLARE @X INT;
	DECLARE @Y INT;
	DECLARE @W INT;

	SET @X = (SELECT COUNT(*) FROM INSERTED);
	SET @Y = (SELECT COUNT(*) FROM DELETED);

	IF (@X > 0 AND @Y = 0)
	BEGIN
		PRINT 'INSERARE CU SUCCES A ' + CONVERT(VARCHAR(20), @X) + ' DISCIPLINE';
	END;

	ELSE IF (@X = @Y)
	BEGIN
		PRINT 'MODIFICARE CU SUCCES A ' + CONVERT(VARCHAR(20), @Y) + ' DISCIPLINE';
	END;

	ELSE IF (@X = 0 AND @Y > 0)
	BEGIN
		PRINT 'ELIMINARE CU SUCCES A ' + CONVERT(VARCHAR(20), @Y) + ' DISCIPLINE';
	END;


INSERT INTO DISCIPLINA(NUME) VALUES ('EXAMEN')
UPDATE DISCIPLINA SET NUME = 'TESTARE' WHERE NUME = 'EXAMEN'
DELETE DISCIPLINA WHERE NUME = 'TESTARE'


--15. Să se scrie un declanșator ce la gestionarea tabelei cu note va forma evidenţa modificărilor intr-o altă tabela--
CREATE TABLE LOGG(LOG_ID INT PRIMARY KEY IDENTITY(1,1),
				  NOTA_ID INT, 
				  EXAMINARE_ID INT, 
				  STUDENT_ID INT, 
				  NOTA FLOAT,
				  DATA_EXEC DATETIME DEFAULT GETDATE())

ALTER TRIGGER TR3 ON NOTA
AFTER UPDATE 
AS
	DECLARE @NOTA_ID INT; 
	DECLARE @EXAMINARE_ID INT;
	DECLARE @STUDENT_ID INT; 
	DECLARE @NOTA FLOAT;
	
	SET @NOTA_ID = (SELECT NOTA_ID FROM DELETED);
	SET @EXAMINARE_ID = (SELECT EXAMINARE_ID FROM DELETED);
	SET @STUDENT_ID = (SELECT STUDENT_ID FROM DELETED);
	SET @NOTA = (SELECT NOTA FROM DELETED);

INSERT INTO LOGG(NOTA_ID, EXAMINARE_ID, STUDENT_ID, NOTA) VALUES (@NOTA_ID, @EXAMINARE_ID, @STUDENT_ID, @NOTA )

UPDATE NOTA SET NOTA = 9 WHERE STUDENT_ID = 65


--16. Formați un plan de mentenanță(backup) asupra bazei de date student cu posibilitate de evidență a jurnalului de mentenanță--
CREATE TABLE JURNAL(JURNAL_ID INT PRIMARY KEY IDENTITY(1,1),
				    DATA_EXEC DATETIME DEFAULT GETDATE(),
					ACTIUNE VARCHAR(50))




